---
description: 
globs: 
alwaysApply: false
---
# Next.js SSR/SSG Safe Coding Rules

## üö® Browser-Only API Usage Guidelines

### Problematic Browser-Only APIs
- `FileList`, `File`, `Blob`
- `window`, `document`, `navigator`
- `localStorage`, `sessionStorage`
- `XMLHttpRequest`, `fetch` (in client components)
- DOM manipulation APIs (`getElementById`, `querySelector`, etc.)

### ‚úÖ Safe Usage Patterns

#### 1. **Browser Environment Check**
```typescript
// ‚ùå Wrong approach - causes SSR errors
const contactFormSchema = z.object({
  attachment: z.instanceof(FileList)
})

// ‚úÖ Correct approach - browser environment check
const contactFormSchema = z.object({
  attachment: z
    .any()
    .refine((files) => {
      if (typeof window === 'undefined') return true // Skip validation on server
      // Execute validation logic only in browser
      return !files || files.length === 0 || files[0]?.size <= 5 * 1024 * 1024
    })
})
```

#### 2. **Dynamic Rendering Configuration**
For pages using browser-only APIs, add this configuration:
```typescript
// Add at the top of the page
export const dynamic = 'force-dynamic'
```

#### 3. **useEffect Pattern**
```typescript
// ‚ùå Wrong approach
const Component = () => {
  const userAgent = navigator.userAgent // SSR error!
  
  // ‚úÖ Correct approach
  const [userAgent, setUserAgent] = useState('')
  
  useEffect(() => {
    setUserAgent(navigator.userAgent)
  }, [])
}
```

### üìã Development Checklist

#### When Writing New Components
- [ ] Check for browser-only API usage
- [ ] Add `typeof window !== 'undefined'` checks
- [ ] Configure `export const dynamic = 'force-dynamic'` if needed
- [ ] Use `useEffect` for client-side only execution

#### Form Validation (Zod Usage)
- [ ] Avoid direct use of `FileList`, `File` objects
- [ ] Use `z.any()` with custom refine functions
- [ ] Skip validation on server environment

#### File Upload Implementation
- [ ] Reference [app/contact/ContactPageClient.tsx](mdc:app/contact/ContactPageClient.tsx)
- [ ] Add browser environment check for FormData processing
- [ ] Resolve TypeScript errors with type casting

### üõ†Ô∏è Key Fix Examples

**Contact Page Modifications:**
- [app/contact/page.tsx](mdc:app/contact/page.tsx): Added `export const dynamic = 'force-dynamic'`
- [app/contact/ContactPageClient.tsx](mdc:app/contact/ContactPageClient.tsx): Safe FileList handling

### üîç Build Error Debugging

#### When "X is not defined" error occurs:
1. Check if the API is browser-only
2. Add `typeof window !== 'undefined'` check
3. Configure dynamic rendering if needed
4. Test locally with `npm run build`

#### When Vercel deployment fails:
1. Check prerender errors in build logs
2. Add `export const dynamic = 'force-dynamic'` to the page
3. Fix browser-only API usage

### üìö Reference Documentation
- [Next.js Dynamic Rendering](mdc:https:/nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-rendering)
- [Next.js Runtime APIs](mdc:https:/nextjs.org/docs/app/building-your-application/rendering/composition-patterns#when-to-use-the-client-and-server-components)


